/******************************************************************************/
/***          Generated by IBExpert 2012.03.13 31.05.2012 17:36:25          ***/
/******************************************************************************/

SET NAMES WIN1251;

CONNECT '' USER 'SYSDBA';



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR BFW_INF_MSG_GEN;


SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE OR ALTER PROCEDURE BFW_INF_SP_MSG_POP (
    FROM_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    SDAT DATE,
    SENDER VARCHAR(38),
    TOPIC VARCHAR(50),
    TXT VARCHAR(250))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_INF_SP_MSG_PUSH (
    RECEIVER_ VARCHAR(38),
    TOPIC_ VARCHAR(50),
    TXT_ VARCHAR(250))
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE BFW_INF_MSG (
    ID        INTEGER NOT NULL,
    STATUS    INTEGER DEFAULT 0 NOT NULL,
    SENDER    VARCHAR(38) DEFAULT USER NOT NULL,
    RECEIVER  VARCHAR(38) NOT NULL,
    TOPIC     VARCHAR(50) NOT NULL,
    TXT       VARCHAR(250) NOT NULL,
    IDAT      DATE DEFAULT 'NOW' NOT NULL,
    RDAT      DATE
);


INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_INF_MSG', 'BFW1', 0, NULL);

COMMIT WORK;

INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_INF_MSG', 'POP', 'select * from bfw_inf_sp_msg_pop(:last_id)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_INF_MSG', 'PUSH', 'execute procedure bfw_inf_sp_msg_push(:receiver, :topic, :txt)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_INF_MSG', 'MARK', 'update bfw_inf_msg set status = 1 where id = :id', NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, NULL);

COMMIT WORK;



/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE BFW_INF_MSG ADD CONSTRAINT PK_BFW_INF_MSG PRIMARY KEY (ID);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: BFW_INF_MSG_BU */
CREATE OR ALTER TRIGGER BFW_INF_MSG_BU FOR BFW_INF_MSG
ACTIVE BEFORE UPDATE POSITION 0
as
begin
  if (new.status <> old.status and old.status = 0) then
    new.rdat = 'NOW';
end
^


SET TERM ; ^



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

CREATE OR ALTER PROCEDURE BFW_INF_SP_MSG_POP (
    FROM_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    SDAT DATE,
    SENDER VARCHAR(38),
    TOPIC VARCHAR(50),
    TXT VARCHAR(250))
AS
declare variable receiver varchar(38);
begin
  receiver = user;
  from_id_ = coalesce(from_id_, 0);

  for
    select m.id, m.idat, coalesce(u.name, m.sender),  m.topic, m.txt
    from bfw_inf_msg m
         left join bfw_sec_users u on (u.userid = m.sender)
    where m.receiver = :receiver and m.status = 0 and m.id > :from_id_
    order by m.id
    into :id, :sdat, :sender, :topic, :txt
  do
    suspend;

end^


CREATE OR ALTER PROCEDURE BFW_INF_SP_MSG_PUSH (
    RECEIVER_ VARCHAR(38),
    TOPIC_ VARCHAR(50),
    TXT_ VARCHAR(250))
AS
declare variable id integer;
begin
  receiver_ = upper(receiver_);
  id = gen_id(bfw_inf_msg_gen, 1);
  insert into bfw_inf_msg(id, receiver, topic, txt)
  values(:id, :receiver_, :topic_, :txt_);

end^



SET TERM ; ^
